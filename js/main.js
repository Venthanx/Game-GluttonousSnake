// 使用面向对象的方法 来编写

/* -----------------------------------
    1 分析对象成员
        1.1 背景地图
            - 太简单无需抽象成对象
        1.2 食物
            - 属性
                - 大小
                - 颜色
                - 位置
            - 方法
                - 随机生成
                - 消失逻辑
        1.3 蛇
            - 属性
                - 大小长度
                - 颜色
                - 组成 头 尾
                - 方向
            - 方法
                - 渲染生成到地图上
                - 蛇身变长逻辑 用[数组]保存
        1.4 游戏逻辑对象
            - 属性
                - map
                - food
                - snake
            - 方法
                - start 开始游戏
                - 让蛇移动起来
                - 通过键盘控制蛇的移动方向
                - 当蛇撞上边界 游戏结束

    2 注意问题
        - 由于在JS中写的代码都是被暴露在全局作用域中 在多人协作中 会有可能在不同js文件中出现命名冲突
        - 因此我们要使用"自调用函数"来开启新的作用域 由于是匿名函数 又减少命名冲突的可能性
        - 格式 (function(){...})()
        - 但它属于一种局部作用域 外部无法访问 
        - 此时可以在"自调用函数"里添加一个全局定义 来解决访问问题
            (function(){
                ...
                window.构造函数 = 构造函数;
            })()
        - 私有方法：即不能被外部访问的方法 这里使用自调用函数包裹 使其无法共享
        
--------------------------------------*/


// 主运行函数

(function () {
    var map = document.getElementById('map');
    var game = new Game(map);
    game.start();
})()